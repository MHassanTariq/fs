PARTIAL -- Smart Contract Seperation

Smart Contract code is separated into multiple contracts:

1) FlightSuretyData.sol for data persistence
2) FlightSuretyApp.sol for app logic and oracles code

-- Dapp Created and Used for Contract Calls

A Dapp client has been created and is used for triggering contract calls. Client can be launched with “npm run dapp” and is available at http://localhost:8000

Specific contract calls:

1) Passenger can purchase insurance for flight
2) Trigger contract to request flight status update

-- Oracle Server Application

A server app has been created for simulating oracle behavior. Server can be launched with “npm run server”

DONE -- Operational status control is implemented in contracts

Students has implemented operational status control.

DONE -- Fail Fast Contract

Contract functions “fail fast” by having a majority of “require()” calls at the beginning of function body

Airlines

CRITERIA
MEETS SPECIFICATIONS

DONE -- Airline Contract Initialization

First airline is registered when contract is deployed.

PARTIAL -- Multiparty Consensus [ remove requireRegisteredAirline() on registerAirline if numFunded > 4 ]

Only existing airline may register a new airline until there are at least four airlines registered

Demonstrated either with Truffle test or by making call from client Dapp

NEEDS TESTING -- Multiparty Consensus

Registration of fifth and subsequent airlines requires multi-party consensus of 50% of registered airlines

Demonstrated either with Truffle test or by making call from client Dapp

DONE -- Airline Ante

Airline can be registered, but does not participate in contract until it submits funding of 10 ether

Demonstrated either with Truffle test or by making call from client Dapp

Passengers

CRITERIA
MEETS SPECIFICATIONS
-- Passenger Airline Choice

Passengers can choose from a fixed list of flight numbers and departure that are defined in the Dapp client

-- Passenger Payment

Passengers may pay up to 1 ether for purchasing flight insurance.

-- Passenger Repayment

If flight is delayed due to airline fault, passenger receives credit of 1.5X the amount they paid

-- Passenger Withdraw

Passenger can withdraw any funds owed to them as a result of receiving credit for insurance payout

-- Insurance Payouts

Insurance payouts are not sent directly to passenger’s wallet

Oracles (Server App)

CRITERIA
MEETS SPECIFICATIONS
-- Functioning Oracle

Oracle functionality is implemented in the server app.

-- Oracle Initialization

Upon startup, 20+ oracles are registered and their assigned indexes are persisted in memory

-- Oracle Updates

Update flight status requests from client Dapp result in OracleRequest event emitted by Smart Contract that is captured by server (displays on console and handled in code)

-- Oracle Functionality

Server will loop through all registered oracles, identify those oracles for which the OracleRequest event applies, and respond by calling into FlightSuretyApp contract with random status code of Unknown (0), On Time (10) or Late Airline (20), Late Weather (30), Late Technical (40), or Late Other (50)
